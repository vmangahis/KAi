# Generated by Django 4.0.5 on 2022-10-15 17:45

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=100, null=True, unique=True)),
                ('premiere_date', models.DateField(blank=True, default=None, null=True)),
                ('summary', models.TextField(default='No summary')),
                ('thumbnail', models.URLField(default='https://picsum.photos/seed/picsum/300/500', null=True)),
                ('large_image', models.URLField(default='https://picsum.photos/seed/picsum/500/500', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnimeGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Test', max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='John Doe', max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MangaGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Test', max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudioCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studio_name', models.CharField(max_length=60)),
                ('anime_works', models.ManyToManyField(blank=True, to='base.anime')),
            ],
        ),
        migrations.CreateModel(
            name='Manga',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=100)),
                ('summary', models.TextField(default='No summary')),
                ('large_image', models.URLField(default='https://picsum.photos/seed/picsum/500/500')),
                ('thumbnail', models.URLField(default='https://picsum.photos/seed/picsum/300/500')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.author')),
                ('genre', models.ManyToManyField(to='base.mangagenre')),
            ],
        ),
        migrations.AddField(
            model_name='author',
            name='works',
            field=models.ManyToManyField(blank=True, related_name='author_work', to='base.manga'),
        ),
        migrations.AddField(
            model_name='anime',
            name='genre',
            field=models.ManyToManyField(to='base.animegenre'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('display_name', models.CharField(max_length=100)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('intro', models.TextField(null=True)),
                ('avatar', models.ImageField(default='blank-avatar.svg', null=True, upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('plan_readlist', models.ManyToManyField(blank=True, related_name='plan_readlist', to='base.manga')),
                ('plan_watchlist', models.ManyToManyField(blank=True, related_name='plan_watchlist', to='base.anime')),
                ('readlist', models.ManyToManyField(blank=True, related_name='readlist', to='base.manga')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('watchlist', models.ManyToManyField(blank=True, related_name='watchlist', to='base.anime')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
